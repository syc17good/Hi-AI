var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { AbstractSDKRequest, StorageType, formatUrl } from '@cloudbase/adapter-interface';
function isMatch() {
    if (typeof wx === 'undefined') {
        return false;
    }
    if (typeof App === 'undefined') {
        return false;
    }
    if (typeof Page === 'undefined') {
        return false;
    }
    if (typeof getApp !== 'function') {
        return false;
    }
    if (!wx.onAppHide) {
        return false;
    }
    if (!wx.offAppHide) {
        return false;
    }
    if (!wx.onAppShow) {
        return false;
    }
    if (!wx.offAppShow) {
        return false;
    }
    if (!wx.getSystemInfoSync) {
        return false;
    }
    if (!wx.getStorageSync) {
        return false;
    }
    if (!wx.setStorageSync) {
        return false;
    }
    if (!wx.connectSocket) {
        return false;
    }
    if (!wx.request) {
        return false;
    }
    try {
        if (!wx.getSystemInfoSync()) {
            return false;
        }
        if (wx.getSystemInfoSync().AppPlatform === 'qq') {
            return false;
        }
    }
    catch (e) {
        return false;
    }
    return true;
}
var WxRequest = (function (_super) {
    __extends(WxRequest, _super);
    function WxRequest(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this) || this;
        var timeout = config.timeout, timeoutMsg = config.timeoutMsg, restrictedMethods = config.restrictedMethods;
        _this._timeout = timeout || 0;
        _this._timeoutMsg = timeoutMsg || '请求超时';
        _this._restrictedMethods = restrictedMethods || ['get', 'post', 'upload', 'download'];
        return _this;
    }
    WxRequest.prototype.post = function (options) {
        var self = this;
        return new Promise(function (resolve, reject) {
            var timer = null;
            var url = options.url, data = options.data, headers = options.headers;
            var task = wx.request({
                url: formatUrl('https:', url),
                data: data,
                method: 'POST',
                header: headers,
                success: function (res) {
                    self._clearTimeout(timer);
                    resolve(res);
                },
                fail: function (err) {
                    self._clearTimeout(timer);
                    reject(err);
                }
            });
            timer = self._setTimeout('post', task);
        });
    };
    WxRequest.prototype.upload = function (options) {
        var _this = this;
        var self = this;
        return new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
            var timer, url, file, data, headers, task;
            return __generator(this, function (_a) {
                timer = null;
                url = options.url, file = options.file, data = options.data, headers = options.headers;
                task = wx.uploadFile({
                    url: formatUrl('https:', url),
                    filePath: file,
                    name: 'file',
                    formData: __assign(__assign({}, data), { file: file }),
                    header: headers,
                    success: function (res) {
                        self._clearTimeout(timer);
                        var result = {
                            statusCode: res.statusCode,
                            data: res.data || {}
                        };
                        if (res.statusCode === 200 && data.success_action_status) {
                            result.statusCode = parseInt(data.success_action_status, 10);
                        }
                        resolve(result);
                    },
                    fail: function (err) {
                        self._clearTimeout(timer);
                        resolve(err);
                    }
                });
                timer = self._setTimeout('upload', task);
                return [2];
            });
        }); });
    };
    WxRequest.prototype.download = function (options) {
        var _this = this;
        var self = this;
        return new Promise(function (resolve, reject) {
            var timer = null;
            var url = options.url, headers = options.headers;
            var task = wx.downloadFile({
                url: formatUrl('https:', url),
                header: headers,
                success: function (res) {
                    self._clearTimeout(timer);
                    if (res.statusCode === 200 && res.tempFilePath) {
                        resolve({
                            statusCode: 200,
                            tempFilePath: res.tempFilePath
                        });
                    }
                    else {
                        resolve(res);
                    }
                },
                fail: function (err) {
                    self._clearTimeout(timer);
                    reject(err);
                }
            });
            timer = _this._setTimeout('download', task);
        });
    };
    WxRequest.prototype._clearTimeout = function (timer) {
        if (timer) {
            clearTimeout(timer);
            timer = null;
        }
    };
    WxRequest.prototype._setTimeout = function (method, task) {
        var _this = this;
        if (!this._timeout || this._restrictedMethods.indexOf(method) === -1) {
            return null;
        }
        var timer = setTimeout(function () {
            console.warn(_this._timeoutMsg);
            task.abort();
        }, this._timeout);
        return timer;
    };
    return WxRequest;
}(AbstractSDKRequest));
export { WxRequest };
export var wxMpStorage = {
    setItem: function (key, value) {
        wx.setStorageSync(key, value);
    },
    getItem: function (key) {
        return wx.getStorageSync(key);
    },
    removeItem: function (key) {
        wx.removeStorageSync(key);
    },
    clear: function () {
        wx.clearStorageSync();
    }
};
var WxMpWebSocket = (function () {
    function WxMpWebSocket(url, options) {
        if (options === void 0) { options = {}; }
        var ws = wx.connectSocket(__assign({ url: url }, options));
        var socketTask = {
            set onopen(cb) {
                ws.onOpen(cb);
            },
            set onmessage(cb) {
                ws.onMessage(cb);
            },
            set onclose(cb) {
                ws.onClose(cb);
            },
            set onerror(cb) {
                ws.onError(cb);
            },
            send: function (data) { return ws.send({ data: data }); },
            close: function (code, reason) { return ws.close({
                code: code,
                reason: reason
            }); },
            get readyState() {
                return ws.readyState;
            },
            CONNECTING: 0,
            OPEN: 1,
            CLOSING: 2,
            CLOSED: 3
        };
        return socketTask;
    }
    return WxMpWebSocket;
}());
export { WxMpWebSocket };
function genAdapter() {
    var adapter = {
        root: {},
        reqClass: WxRequest,
        wsClass: WxMpWebSocket,
        localStorage: wxMpStorage,
        primaryStorage: StorageType.local,
        getAppSign: function () {
            var info = wx.getAccountInfoSync();
            return info && info.miniProgram ? info.miniProgram.appId : '';
        }
    };
    return adapter;
}
var adapter = {
    genAdapter: genAdapter,
    isMatch: isMatch,
    runtime: 'wx_mp'
};
export default adapter;
