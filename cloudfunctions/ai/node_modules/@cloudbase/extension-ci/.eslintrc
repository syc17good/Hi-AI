{
    "parserOptions": {
        "project": "./tsconfig.json"
    },
    "extends": [
        "airbnb",
        "plugin:eslint-comments/recommended",
        "plugin:@typescript-eslint/recommended"
    ],
    "plugins": [
        "jsdoc"
    ],
    "env": {
        "browser": true,
        "node": true
    },
    "rules": {
        // 对于 TypeScript 不需要此规则
        "consistent-return": "off",
        // 以下规则 TypeScript 可以识别, 不需要 eslint 再判断
        "no-redeclare": "off",
        "no-undef": "off",
        "import/export": "off",
        "no-unused-expressions": "off",
        // 同 no-unused-expressions 的 TypeScript 版本
        "@typescript-eslint/no-unused-expressions": [
            "error",
            {
                "allowShortCircuit": false,
                "allowTernary": false,
                "allowTaggedTemplates": false
            }
        ],
        // 此规则与函数重载冲突
        "no-dupe-class-members": "off",
        // 此规则与 namespace 冲突
        "no-inner-declarations": "off",
        // 以下规则与 @typescript-eslint 中的重复
        "no-use-before-define": "off",
        // 允许 export let xxx
        "import/no-mutable-exports": "off",
        // 允许在构造函数中声明类成员
        "no-useless-constructor": "off",
        "@typescript-eslint/no-parameter-properties": "off",
        // 不在 interface 前增加 I 前缀
        "@typescript-eslint/interface-name-prefix": "off",
        // 不要求显式指明类成员访问控制 (public/protected/private)
        "@typescript-eslint/explicit-member-accessibility": "off",
        // 不要求函数显示指明返回类型
        "@typescript-eslint/explicit-function-return-type": "off",
        // 允许使用 any
        "@typescript-eslint/no-explicit-any": "off",
        // 允许使用 namespace
        "@typescript-eslint/no-namespace": "off",
        // 允许使用非空断言 (!)
        "@typescript-eslint/no-non-null-assertion": "off",
        // 允许使用 import xxx = require("xxx");
        // 使用 power-assertion 时必须以这种风格引入 assert 函数
        "@typescript-eslint/no-require-imports": "off",
        // 允许使用 /// <reference />
        // 在编写库的时候有用
        "@typescript-eslint/no-triple-slash-reference": "off",
        // 使用 2 空格缩进
        // 使用 @typescript-eslint 后会覆盖原来的 indent 规则, 需要重新定义
        "@typescript-eslint/indent": [
            "error",
            4
        ],
        "indent": [
            "error",
            4
        ],
        // 禁止无用的类定义 (空类定义, 仅有构造函数, 仅有静态成员)
        "@typescript-eslint/no-extraneous-class": "error",
        // 禁止将 this 赋值到其它变量上
        // 如果有箭头函数无法覆盖的情况, 在代码中禁用即可
        "@typescript-eslint/no-this-alias": [
            "error",
            {
                "allowDestructuring": true
            }
        ],
        // 优先使用 function type, 而不是用 interface 定义类型
        "@typescript-eslint/prefer-function-type": "error",
        // 允许直接对对象进行类型转换
        "@typescript-eslint/no-object-literal-type-assertion": "off",
        // 使用无用的 type assertion 时警告
        "@typescript-eslint/no-unnecessary-type-assertion": "warn",
        // TODO: 这个在 TypeScript 里面似乎有 bug, 先关闭
        "import/extensions": "off",
        // 不强制要求类成员函数使用 this (便于在 TAF Imp 和 React 中拆分函数)
        "class-methods-use-this": "off",
        // 不强制限制一行代码的长度
        "max-len": "off",
        // 不限制文件中的 class 数
        "max-classes-per-file": "off",
        // 允许使用位运算
        "no-bitwise": "off",
        // 允许使用 console
        "no-console": "off",
        // 允许混合使用 && ||
        "no-mixed-operators": "off",
        // 允许 ++/-- 运算符
        "no-plusplus": "off",
        // 不要求对 import 进行排序
        "import/order": "off",
        // 不要求 import 的模块一定要存在, 因为有自定义的 resolve 和 alias
        "import/no-unresolved": "off",
        // 不强制使用默认导出
        "import/prefer-default-export": "off",
        // 不要求结构语法较长时一定要换行 (有时判断不一定准确)
        "object-curly-newline": "off",
        // 使用双引号
        "quotes": [
            "error",
            "single"
        ],
        // 禁止多余的逗号
        "comma-dangle": [
            "error",
            "never"
        ],
        // 强制要求类成员之间要保留空行, 但允许单行类成员声明之间没有空行
        "lines-between-class-members": [
            "error",
            "always",
            {
                "exceptAfterSingleLine": true
            }
        ],
        // 强制要求多行代码块只有要保留空行
        "padding-line-between-statements": [
            "error",
            {
                "blankLine": "always",
                "prev": "class",
                "next": "*"
            },
            {
                "blankLine": "always",
                "prev": "function",
                "next": "*"
            },
            {
                "blankLine": "always",
                "prev": "iife",
                "next": "*"
            },
            {
                "blankLine": "always",
                "prev": "multiline-block-like",
                "next": "*"
            },
            {
                "blankLine": "always",
                "prev": "multiline-expression",
                "next": "*"
            }
        ],
        // 不允许出现多个连续的空格, 但允许行尾注释前出现
        "no-multi-spaces": [
            "error",
            {
                "ignoreEOLComments": true
            }
        ],
        // 不允许修改函数参数, 但允许修改函数参数中的属性
        "no-param-reassign": [
            "error",
            {
                "props": false
            }
        ],
        // 不允许使用 @deprecated 的变量或函数
        "import/no-deprecated": "error",
        // jsdoc @param 的名字和顺序必须和定义的一致
        "jsdoc/check-param-names": "error",
        // jsdoc 中 @ 开头的 tag 名称必须符合规范
        "jsdoc/check-tag-names": "error",
        // 不允许出现未使用的 eslint-disable
        "eslint-comments/no-unused-disable": "error",
        "semi": [
            "error",
            "never"
        ],
    }
}